# coding: utf-8

"""
    MiC4.0 Element API Cluster special foundation

    MIC4.0 - Cluster Special foundations - Element-Interfaces definition

    The version of the OpenAPI document: 3.0.0 // 10.06.2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.data_unit import DataUnit
from openapi_server.models.element_header import ElementHeader
from openapi_server.models.event_data_unit import EventDataUnit
from openapi_server.models.link import Link
from openapi_server.models.measurement_pass_unit import MeasurementPassUnit
from openapi_server.models.statistics import Statistics
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Element(BaseModel):
    """
    Element
    """ # noqa: E501
    element_header: ElementHeader = Field(alias="elementHeader")
    data_series: List[DataUnit] = Field(alias="dataSeries")
    event_data: Optional[List[EventDataUnit]] = Field(default=None, alias="eventData")
    measurement_pass_series: Optional[List[MeasurementPassUnit]] = Field(default=None, alias="measurementPassSeries")
    statistics: Optional[Statistics] = None
    prev_link: Optional[Link] = Field(default=None, alias="prevLink")
    next_link: Optional[Link] = Field(default=None, alias="nextLink")
    __properties: ClassVar[List[str]] = ["elementHeader", "dataSeries", "eventData", "measurementPassSeries", "statistics", "prevLink", "nextLink"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Element from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of element_header
        if self.element_header:
            _dict['elementHeader'] = self.element_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_series (list)
        _items = []
        if self.data_series:
            for _item in self.data_series:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataSeries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in event_data (list)
        _items = []
        if self.event_data:
            for _item in self.event_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eventData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_pass_series (list)
        _items = []
        if self.measurement_pass_series:
            for _item in self.measurement_pass_series:
                if _item:
                    _items.append(_item.to_dict())
            _dict['measurementPassSeries'] = _items
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prev_link
        if self.prev_link:
            _dict['prevLink'] = self.prev_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_link
        if self.next_link:
            _dict['nextLink'] = self.next_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Element from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "elementHeader": ElementHeader.from_dict(obj.get("elementHeader")) if obj.get("elementHeader") is not None else None,
            "dataSeries": [DataUnit.from_dict(_item) for _item in obj.get("dataSeries")] if obj.get("dataSeries") is not None else None,
            "eventData": [EventDataUnit.from_dict(_item) for _item in obj.get("eventData")] if obj.get("eventData") is not None else None,
            "measurementPassSeries": [MeasurementPassUnit.from_dict(_item) for _item in obj.get("measurementPassSeries")] if obj.get("measurementPassSeries") is not None else None,
            "statistics": Statistics.from_dict(obj.get("statistics")) if obj.get("statistics") is not None else None,
            "prevLink": Link.from_dict(obj.get("prevLink")) if obj.get("prevLink") is not None else None,
            "nextLink": Link.from_dict(obj.get("nextLink")) if obj.get("nextLink") is not None else None
        })
        return _obj


