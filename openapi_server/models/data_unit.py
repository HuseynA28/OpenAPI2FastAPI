# coding: utf-8

"""
    MiC4.0 Element API Cluster special foundation

    MIC4.0 - Cluster Special foundations - Element-Interfaces definition

    The version of the OpenAPI document: 3.0.0 // 10.06.2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DataUnit(BaseModel):
    """
    DataUnit
    """ # noqa: E501
    timestamp: datetime = Field(description="The timestamp with timezone of this dataUnit")
    depth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Depth measurement in meters with sign, <br> two decimal digits;<br> Operator obligation/reference point by operator/tool lower edge (drill bucket, auger); <br><br>  Agreement for working methods:<br> Kelly drilling <br>  Impact pile driving <br>  Continous flight auger drilling <br>  Cased continous flight auger ")
    leader_inclination_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Inclination (longitudinal) (X-tilt mast) in degree with sign <br> one decimal digit <br><br>  Agreement for working methods:<br> Kelly drilling <br> Impact pile driving <br>  Continous flight auger drilling <br>  Continous flight auger drilling <br> Full Displacement drilling <br>  Cased continous flight auger ", alias="leaderInclinationX")
    leader_inclination_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Inclination (latitudinal) (Y-tilt mast)  in degree with sign <br> one decimal digit <br><br>  Agreement for working methods:<br> Kelly drilling <br> Impact pile driving <br>  Continous flight auger drilling <br> Full Displacement drilling <br>  Cased continous flight auger  ", alias="leaderInclinationY")
    energy_per_blow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Energy of stroke in kNm (Energy/stroke; single stroke energy; single impact energy; for one stroke only) <br> one decimal digit  <br><br>  Agreement for working methods: <br> Impact pile driving", alias="energyPerBlow")
    slewing_gear_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Slewing gear <br> Alignment zero point; reporting aspect not given; interesting for process tracking; slewing gear; turning gear; rotation versus revelation speed <br> Swing angle angle in degrees with sign <br>Zero point alignment <br> one decimal digit <br><br>  Agreement for working methods:<br> Kelly drilling  <br>  Continous flight auger drilling <br> Full Displacement drilling <br>  Cased continous flight auger  ", alias="slewingGearAngle")
    rotation_speed_rotary_drive: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Drill rotation speed rpm with sign <br> one decimal digit <br><br>  Agreement for working methods:<br> Kelly drilling <br> ", alias="rotationSpeedRotaryDrive")
    drilling_torque: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Drilling torque kNm with sign <br> with decimal place because of small drilling rigs<br><br>  Agreement for working methods:<br> Kelly drilling  <br>  Continous flight auger drilling <br> ", alias="drillingTorque")
    kelly_rope_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Drilling speed in m/min with sign (+ downwards/- upwards) <br> one decimal digit <br> Kelly winch or main winch <br> Sign; speed of main winch; Kelly Rope Speed  <br>  Agreement for working methods:<br> Kelly drilling  <br> Continous flight auger drilling", alias="kellyRopeSpeed")
    crowd_force: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Crowd force in kN with sign (+ downwards/- upwards) <br> one decimal digit <br> Contact force (bottom) versus crowd force (bottom/top); independent of attachment and drilling equipment; crowd force is not the force acting on the drilling tool tip or on the inserting element <br> Contact force (bottom) versus feed force (bottom/top); independent of attachment and drilling equipment; feed force is not the force acting on the drilling tool tip or on the inserting element; feed force on the carriage <br><br>  Agreement for working methods:<br> Kelly drilling <br>  Continous flight auger drilling <br> Full Displacement drilling<br>  Cased continous flight auger  ", alias="crowdForce")
    rotation_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Drilling rate or drilling progress in U/m <br> Rotation rate versus Rotation per Meter versus drilling progress <br><br>  Agreement for working methods:  <br>  Continous flight auger drilling <br> Cased continous flight auger drilling  <br> Full Displacement drilling <br> ", alias="rotationRate")
    intrusion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[mm/U] versus [cm/U]; penetration versus intrusion<br><br>  Agreement for working methods:  <br>  Continous flight auger drilling <br> Cased continous flight auger drilling  <br> Full Displacement drilling <br> <br> prio 1")
    crowd_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Leading sign; [cm/min] instead of [m/min]; without decimal places; reference point carriage versus cylinder <br>  Crowd speed in cm/min with sign (+ downwards/- upwards) <br> without decimal digit <br><br>  Agreement for working methods: <br> Continous flight auger drilling  <br>  Cased continous flight auger  <br> Full Displacement drilling <br> Vibro piling <br> Diaphragm wall cutting <br> Jet grouting <br> Anchor drilling <br> Wet soil mixing", alias="crowdSpeed")
    total_concrete_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total concrete consumption in m3 <br> without decimal digit <br> accumulated after reset from start; accumulated value; more precise definition needed; pumped quantity (also before the start of concreting); filling of the core; concrete quantity measurement <br><br>  Agreement for working methods: <br> Continous flight auger drilling   <br>  Cased continous flight auger   <br> Full Displacement drilling <br> Jet grouting <br> Anchor drilling <br> Wet soil mixing", alias="totalConcreteVolume")
    concrete_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Concrete pressure in bar <br> without decimal digit <br> Measurement at the manifold <br><br>  Agreement for working methods: <br> Continous flight auger drilling <br>  Cased continous flight auger   <br> Full Displacement drilling <br> Jet grouting <br> Anchor drilling <br> Wet soil mixing ", alias="concretePressure")
    relative_auger_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sign; relative displacement [cm]; positive/negative; without decimal place; distinction between preliminary measurement and relative displacement; relative displacement via displacement measurement on cylinder; Relative displacement naming versus relative auger position <br><br>  Agreement for working methods: <br> Full Displacement drilling <br>  Cased continous flight auger  ", alias="relativeAugerPosition")
    rotation_speed_auger: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Drilling drive - auger <br><br>  Agreement for working methods: <br> Full Displacement drilling <br>  Cased continous flight auger ", alias="rotationSpeedAuger")
    rotation_speed_casing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Drill rotation speed inner tube or rotation speed casing rpm with sign  <br> one decimal digit <br><br>  Agreement for working methods: <br> Full Displacement drilling <br>  Cased continous flight auger ", alias="rotationSpeedCasing")
    vibrator_frequency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Vibrator speed [rpm] versus frequency [Hz]; conversion <br><br>  Agreement for working methods: <br> Vibro piling", alias="vibratorFrequency")
    vibrator_amplitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Vibration amplitude in mm of the vibro; Amplitude of vibrator; amplitude versus amplitude; preference for amplitude <br><br>  Agreement for working methods: <br> Vibro piling ", alias="vibratorAmplitude")
    static_moment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Static momentum/unbalance in % of the vibro Designation: static moment; unbalance vibrator <br><br>  Agreement for working methods: <br> Vibro piling ", alias="staticMoment")
    __properties: ClassVar[List[str]] = ["timestamp", "depth", "leaderInclinationX", "leaderInclinationY", "energyPerBlow", "slewingGearAngle", "rotationSpeedRotaryDrive", "drillingTorque", "kellyRopeSpeed", "crowdForce", "rotationRate", "intrusion", "crowdSpeed", "totalConcreteVolume", "concretePressure", "relativeAugerPosition", "rotationSpeedAuger", "rotationSpeedCasing", "vibratorFrequency", "vibratorAmplitude", "staticMoment"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DataUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DataUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp": obj.get("timestamp"),
            "depth": obj.get("depth"),
            "leaderInclinationX": obj.get("leaderInclinationX"),
            "leaderInclinationY": obj.get("leaderInclinationY"),
            "energyPerBlow": obj.get("energyPerBlow"),
            "slewingGearAngle": obj.get("slewingGearAngle"),
            "rotationSpeedRotaryDrive": obj.get("rotationSpeedRotaryDrive"),
            "drillingTorque": obj.get("drillingTorque"),
            "kellyRopeSpeed": obj.get("kellyRopeSpeed"),
            "crowdForce": obj.get("crowdForce"),
            "rotationRate": obj.get("rotationRate"),
            "intrusion": obj.get("intrusion"),
            "crowdSpeed": obj.get("crowdSpeed"),
            "totalConcreteVolume": obj.get("totalConcreteVolume"),
            "concretePressure": obj.get("concretePressure"),
            "relativeAugerPosition": obj.get("relativeAugerPosition"),
            "rotationSpeedAuger": obj.get("rotationSpeedAuger"),
            "rotationSpeedCasing": obj.get("rotationSpeedCasing"),
            "vibratorFrequency": obj.get("vibratorFrequency"),
            "vibratorAmplitude": obj.get("vibratorAmplitude"),
            "staticMoment": obj.get("staticMoment")
        })
        return _obj


