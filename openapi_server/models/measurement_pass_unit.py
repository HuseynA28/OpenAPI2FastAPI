# coding: utf-8

"""
    MiC4.0 Element API Cluster special foundation

    MIC4.0 - Cluster Special foundations - Element-Interfaces definition

    The version of the OpenAPI document: 3.0.0 // 10.06.2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MeasurementPassUnit(BaseModel):
    """
    MeasurementPassUnit
    """ # noqa: E501
    timestamp: Optional[datetime] = None
    depth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Depth measurement in meters with sign (+ down/-up), <br> two decimal digits;<br> Operator obligation/reference point by operator/tool lower edge (drill bucket, auger); <br><br>  Agreement for working methods: <br> Diaphragm wall grabing <br> Diaphragm wall cutting <br> prio 3")
    lowering_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lowering speed in m/min with sign (+ down/-up), <br> one decimal digit;<br><br>  Agreement for working methods: <br> Diaphragm wall grabing <br> Diaphragm wall cutting <br> prio 3", alias="loweringSpeed")
    deviation_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Deviation (longitudinal) in cm with sign <br> two decimal digits;<br><br>  Agreement for working methods: <br> Diaphragm wall grabing <br> Diaphragm wall cutting <br> prio 3", alias="deviationX")
    deviation_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Deviation (latitudinal) in cm with sign <br> two decimal digits;<br><br>  Agreement for working methods: <br> Diaphragm wall grabing <br> Diaphragm wall cutting <br> prio 3", alias="deviationY")
    rotation_z: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rotation Z in degree with sign <br> two decimal digits;<br><br>  Agreement for working methods: <br> Diaphragm wall grabing <br> Diaphragm wall cutting <br> prio 3", alias="rotationZ")
    inclination_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Inclination (longitudinal) in degree with sign <br> one decimal digit;<br><br>  Agreement for working methods: <br> Diaphragm wall grabing <br> Diaphragm wall cutting <br> prio 3", alias="inclinationX")
    inclination_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Inclination (latitudinal) in degree with sign <br> one decimal digit;<br><br>  Agreement for working methods: <br> Diaphragm wall grabing <br> Diaphragm wall cutting <br> prio 3", alias="inclinationY")
    __properties: ClassVar[List[str]] = ["timestamp", "depth", "loweringSpeed", "deviationX", "deviationY", "rotationZ", "inclinationX", "inclinationY"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MeasurementPassUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MeasurementPassUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp": obj.get("timestamp"),
            "depth": obj.get("depth"),
            "loweringSpeed": obj.get("loweringSpeed"),
            "deviationX": obj.get("deviationX"),
            "deviationY": obj.get("deviationY"),
            "rotationZ": obj.get("rotationZ"),
            "inclinationX": obj.get("inclinationX"),
            "inclinationY": obj.get("inclinationY")
        })
        return _obj


