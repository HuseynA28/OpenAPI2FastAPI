# coding: utf-8

"""
    MiC4.0 Element API Cluster special foundation

    MIC4.0 - Cluster Special foundations - Element-Interfaces definition

    The version of the OpenAPI document: 3.0.0 // 10.06.2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ElementHeader(BaseModel):
    """
    ElementHeader
    """ # noqa: E501
    element_unique_id: Optional[StrictStr] = Field(default=None, description="This id has to be unique for all elements of a manufacturer <br> Element description - General <br> Organisational data reference; element name = ID; API topic; no duplicate values; unique reference to the element; multi working method: UniqueID could be the same independent from the working method (same entry point); ", alias="elementUniqueID")
    working_method: Optional[StrictStr] = Field(default=None, description="General information - Application <br> Procedure according to definition MiC 4.0", alias="workingMethod")
    machine_type: Optional[StrictStr] = Field(default=None, description="General information <br> Definition according to ISO 15143-3 Equipment Header, Make + Model + Serial Number separated with spaces ", alias="machineType")
    element_number: Optional[StrictStr] = Field(default=None, description="The name of the element, <br> Element description - General  <br> e.g. pile number <br> free text, <br><br>  Agreement for working methods:<br> Kelly drilling <br> Continous flight auger drilling <br> Cased continous flight auger drilling <br> Full Displacement drilling <br> Vibro piling <br> Diaphragm wall grabing <br> Impact pile driving", alias="elementNumber")
    record_start_date_time: Optional[datetime] = Field(default=None, description="The Timestamp with timezone of starting the recording of element production in UTC format <br> Start data recording; operator obligation; push of the start button; recordstarttime; start of element;  <br> Element - Execution - Time <br><br>  Agreement for working methods:<br> Kelly drilling <br> Continous flight auger drilling <br> Cased continous flight auger drilling <br> Full Displacement drilling <br> Impact pile driving <br> Vibro piling <br> Diaphragm wall grabing", alias="recordStartDateTime")
    record_stop_date_time: Optional[datetime] = Field(default=None, description="The Timestamp with timezone of end of the recording of element production, in UTC format <br> Stop data recording; operation obligation; push of the stop button; record end tim; end of element  <br> Element - Execution - Time <br><br>  Agreement for working methods:<br> Kelly drilling <br> Continous flight auger drilling <br> Cased continous flight auger drilling <br> Full Displacement drilling <br> Impact pile driving <br> Vibro piling <br> Diaphragm wall grabing ", alias="recordStopDateTime")
    depth_orientation: Optional[StrictStr] = Field(default=None, description="The sign by moving down the hole  <br> plus/minus <br> 'plus' depth is increasing during down movment  'plus' depth is decreasing during down movment  <br> Application independent parameter  <br> '+ if dept to bottom is positive | - if depth to bottom is negative <br><br>  Agreement for working methods:  Continous flight auger drilling  <br> Impact pile driving <br> Full Displacement drilling  <br> Vibro piling", alias="depthOrientation")
    operator_id: Optional[StrictStr] = Field(default=None, description="Name of the operator <br> free text <br> Element description - General <br> Driver name; DVSGO - obligation of the operator <br><br>  Agreement for working methods: <br> kelly drilling  <br> Continous flight auger drilling <br> Cased continous flight auger drilling <br> Full Displacement drilling  <br> Impact pile driving <br> VIBRO <br> Diaphragm wall grabing", alias="operatorID")
    rotation_direction: Optional[StrictStr] = Field(default=None, description="'+rotation direction to right is positiv | -rotation direction to right is negativ; rotation direction clockwise (view to pile); the same is used for slewing angle; 0/1 - Bit-definition --> +/- clockwise vs. Counterclockwise; recommendation: +/-<br> The sign by rotational moving<br> plus/minus <br> 'plus' rotational moving is positiv in right direction (clockwise) ; 'minus' rotational moving is negativ in right direction (clockwise) ; (View in the direction of the hole; Swinging is handled analog <br><br>  Agreement for working methods: Continous flight auger drilling <br> Full Displacement drilling ", alias="rotationDirection")
    jobsite: Optional[StrictStr] = Field(default=None, description="The name of the jobsite - General Information - <br><br>  Agreement for working methods: <br> all ")
    ram_block_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block Weight of the Ram <br> Attachment device - Description <br><br>  Agreement for working methods: <br> Impact pile driving ", alias="ramBlockWeight")
    __properties: ClassVar[List[str]] = ["elementUniqueID", "workingMethod", "machineType", "elementNumber", "recordStartDateTime", "recordStopDateTime", "depthOrientation", "operatorID", "rotationDirection", "jobsite", "ramBlockWeight"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ElementHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ElementHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "elementUniqueID": obj.get("elementUniqueID"),
            "workingMethod": obj.get("workingMethod"),
            "machineType": obj.get("machineType"),
            "elementNumber": obj.get("elementNumber"),
            "recordStartDateTime": obj.get("recordStartDateTime"),
            "recordStopDateTime": obj.get("recordStopDateTime"),
            "depthOrientation": obj.get("depthOrientation"),
            "operatorID": obj.get("operatorID"),
            "rotationDirection": obj.get("rotationDirection"),
            "jobsite": obj.get("jobsite"),
            "ramBlockWeight": obj.get("ramBlockWeight")
        })
        return _obj


